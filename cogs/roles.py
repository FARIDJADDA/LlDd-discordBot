import discord
import json
import os
from discord.ext import commands
from utils.logger import logger


class Roles(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.roles_file = "data/default_roles.json"  # Nouveau chemin
        self.default_roles = self.load_roles()

    def load_roles(self):
        """Charge les r√¥les par d√©faut depuis un fichier JSON."""
        os.makedirs("data", exist_ok=True)  # Cr√©e le dossier data s'il n'existe pas
        if not os.path.exists(self.roles_file):
            logger.info(f"Fichier '{self.roles_file}' introuvable. Cr√©ation avec une liste vide par d√©faut.")
            with open(self.roles_file, "w") as file:
                json.dump([], file, indent=4)  # Initialisation avec une liste vide
            return []

        try:
            with open(self.roles_file, "r") as file:
                return json.load(file)
        except Exception as e:
            logger.error(f"Erreur lors du chargement des r√¥les par d√©faut : {e}")
            return []

    def save_roles(self):
        """Sauvegarde les r√¥les par d√©faut dans un fichier JSON."""
        try:
            with open(self.roles_file, "w") as file:
                json.dump(self.default_roles, file, indent=4)
            logger.info(f"R√¥les par d√©faut sauvegard√©s dans '{self.roles_file}'.")
        except Exception as e:
            logger.error(f"Erreur lors de la sauvegarde des r√¥les par d√©faut : {e}")

    @commands.Cog.listener()
    async def on_member_join(self, member: discord.Member):
        """Attribue automatiquement les r√¥les par d√©faut aux nouveaux membres."""
        guild = member.guild

        # V√©rifie que des r√¥les par d√©faut sont configur√©s
        if not self.default_roles:
            logger.warning("Aucun r√¥le par d√©faut configur√©.")
            return

        # Recherche des r√¥les existants sur le serveur
        roles_to_add = []
        for role_name in self.default_roles:
            role = discord.utils.get(guild.roles, name=role_name)
            if role:
                roles_to_add.append(role)
            else:
                logger.warning(f"Le r√¥le '{role_name}' est introuvable sur le serveur '{guild.name}'.")

        # V√©rifie que des r√¥les valides existent
        if not roles_to_add:
            logger.warning(f"Aucun r√¥le valide trouv√© pour attribuer √† {member.name} dans {guild.name}.")
            return

        # Attribution des r√¥les
        try:
            await member.add_roles(*roles_to_add, reason="Attribution automatique √† l'arriv√©e")
            logger.info(
                f"R√¥les ajout√©s √† {member.name} dans {guild.name} : {', '.join([role.name for role in roles_to_add])}.")

            # Confirmation en DM au membre
            embed = discord.Embed(
                title="üéâ Bienvenue sur le serveur !",
                description=f"Salut {member.mention} !\nTu as re√ßu les r√¥les suivants :\n**{', '.join([role.name for role in roles_to_add])}**",
                color=discord.Color.green()
            )
            embed.set_thumbnail(url="attachment://roles_icon.png")
            await member.send(embed=embed, file=discord.File("assets/roles_icon.png", filename="roles_icon.png"))

        except discord.Forbidden:
            logger.error(f"Permissions insuffisantes pour attribuer des r√¥les √† {member.name}.")
        except Exception as e:
            logger.error(f"Erreur inattendue lors de l'attribution des r√¥les √† {member.name} : {e}")

    @commands.hybrid_command(name="set_default_roles", description="D√©finit les r√¥les par d√©faut pour les nouveaux membres.")
    @commands.has_permissions(administrator=True)
    async def set_default_roles(self, ctx: commands.Context, *, roles: str):
        """D√©finit les r√¥les par d√©faut via une commande hybride."""
        role_names = [role.strip() for role in roles.split(",")]
        self.default_roles = role_names
        self.save_roles()

        embed = discord.Embed(
            title="‚úÖ R√¥les par d√©faut mis √† jour",
            description=f"Les r√¥les suivants seront attribu√©s automatiquement :\n**{', '.join(role_names)}**",
            color=discord.Color.green()
        )
        await ctx.send(embed=embed)
        logger.info(f"R√¥les par d√©faut mis √† jour par {ctx.author}: {', '.join(role_names)}.")

    @commands.hybrid_command(name="show_default_roles", description="Affiche les r√¥les par d√©faut actuels.")
    async def show_default_roles(self, ctx: commands.Context):
        """Affiche les r√¥les par d√©faut via une commande hybride."""
        if self.default_roles:
            embed = discord.Embed(
                title="üìã R√¥les par d√©faut",
                description=f"Les r√¥les suivants seront attribu√©s automatiquement :\n**{', '.join(self.default_roles)}**",
                color=discord.Color.dark_green()
            )
        else:
            embed = discord.Embed(
                title="‚ùå Aucun r√¥le par d√©faut d√©fini",
                description="Aucun r√¥le n'est configur√© pour √™tre attribu√© automatiquement.",
                color=discord.Color.red()
            )
        await ctx.send(embed=embed)
        logger.info(f"R√¥les par d√©faut affich√©s pour {ctx.author}.")


async def setup(bot: commands.Bot):
    """Ajoute la cog au bot."""
    await bot.add_cog(Roles(bot))

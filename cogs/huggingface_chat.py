import discord
import aiohttp
from discord.ext import commands
from dotenv import load_dotenv
import os

# Chargement des variables d'environnement
load_dotenv(dotenv_path="config")
HUGGINGFACE_API_KEY = os.getenv("HUGGINGFACE_API_KEY")

# Liste des mod√®les Hugging Face √† tester dans l'ordre
MODELS = [
    "bigscience/bloom-560m",          # Premier mod√®le √† tester
    "tiiuae/falcon-7b-instruct",      # Deuxi√®me mod√®le
    "google/flan-t5-small"           # Troisi√®me mod√®le
]

# URL de base pour l'API Hugging Face
API_BASE_URL = "https://api-inference.huggingface.co/models/"


class HuggingFaceChat(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    async def query_model(self, model_url: str, headers: dict, payload: dict) -> str:
        """
        Effectue une requ√™te √† un mod√®le Hugging Face et renvoie la r√©ponse ou une erreur 503.
        """
        async with aiohttp.ClientSession() as session:
            async with session.post(model_url, headers=headers, json=payload) as response:
                if response.status == 503:
                    raise Exception("503")  # Mod√®le indisponible
                elif response.status != 200:
                    raise Exception(f"Erreur API : {response.status}")
                result = await response.json()
                return result[0].get('generated_text', 'Aucune r√©ponse g√©n√©r√©e.')

    @commands.hybrid_command(name="ask_hf", description="Pose une question √† un mod√®le Hugging Face.")
    async def ask_hf(self, ctx: commands.Context, *, question: str):
        """
        Essaie plusieurs mod√®les Hugging Face et renvoie une r√©ponse.
        """
        embed_loading = discord.Embed(
            title="üí≠ Hugging Face r√©fl√©chit...",
            description="Veuillez patienter pendant que je g√©n√®re une r√©ponse...",
            color=discord.Color.dark_purple()
        )
        loading_message = await ctx.send(embed=embed_loading)

        headers = {"Authorization": f"Bearer {HUGGINGFACE_API_KEY}"}
        payload = {"inputs": question}

        for model in MODELS:
            try:
                # Construire l'URL du mod√®le
                model_url = f"{API_BASE_URL}{model}"
                print(f"üîÑ Tentative avec le mod√®le : {model}")
                # Appeler le mod√®le
                answer = await self.query_model(model_url, headers, payload)

                # Si une r√©ponse est obtenue, on affiche l'embed final
                embed_response = discord.Embed(
                    title="ü§ñ R√©ponse de Hugging Face",
                    description=answer,
                    color=discord.Color.dark_teal()
                )
                embed_response.set_footer(text=f"Question pos√©e par {ctx.author} ‚Ä¢ Mod√®le : {model}",
                                          icon_url=ctx.author.avatar.url)
                await loading_message.edit(embed=embed_response)
                return  # On sort de la fonction si la r√©ponse est r√©ussie

            except Exception as e:
                # Gestion des erreurs pour chaque mod√®le
                if str(e) == "503":
                    print(f"‚ö†Ô∏è Le mod√®le {model} est indisponible (503). Tentative avec le suivant...")
                else:
                    print(f"‚ùå Erreur avec le mod√®le {model} : {e}")

        # Si aucun mod√®le n'a fonctionn√©
        embed_error = discord.Embed(
            title="‚ùå Tous les mod√®les sont indisponibles",
            description="Impossible de g√©n√©rer une r√©ponse pour le moment. Veuillez r√©essayer plus tard.",
            color=discord.Color.dark_embed()
        )
        await loading_message.edit(embed=embed_error)


async def setup(bot: commands.Bot):
    """Ajoute la cog Hugging Face au bot."""
    await bot.add_cog(HuggingFaceChat(bot))
